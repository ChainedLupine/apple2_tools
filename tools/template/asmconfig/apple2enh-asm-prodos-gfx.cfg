# Configuration for assembler programs which don't need a special setup
# loading at 0x803
# things are kinda jam packed, due to using DHGR graphics.

# map for //e:

# memory (MAIN):
#  0x0803 - 0x1FFF   free (6140 bytes)
#  0x2000 - 0x5FFF   DHGR page 1 & 2 (16383 bytes)
#  0x6000 - 0xBEFF   free (24319 bytes)

# 0xBB00 - 1024 byte file buffer for ProDOS ($400)
# 0xBF00 - MLI interface to ProDOS

# memory (AUX):
#  0x0400 - 0x1FFF   free (7167 bytes)
#  0x2000 - 0x5FFF   DHGR page 1 & 2 (16383 bytes)
#  0x6000 - 0xBEFF   free (24319 bytes, 23296 bytes after ProDOS IO buffer)

# 0x4000 - 0xBF00 (minus 0x0400) = total 31488 bytes

FEATURES {
    STARTADDRESS: default = $4000;    # load right after DHGR buffers
}
SYMBOLS {
    __FILETYPE__: type = weak, value = $0006; # ProDOS file type
}
MEMORY {
    ZP:     file = "",               	start = $0000,  		size = $00FF;
    HEADER: file = %O,               	start = %S - $003A,    	size = $003A;
    HIGH:   file = %O, define = yes,	start = %S,            	size = $BF00 - $0400 - %S;				# leaving 1024 bytes for ProDOS buffer
	LO:		file = "", define = yes, 	start = $0803,			size = $1FFF - $0803;
    BSS:    file = "",               	start = __HIGH_LAST__, 	size = $BF00 - $0400 - __HIGH_LAST__;
}
SEGMENTS {
    ZEROPAGE:	load = ZP,     	type = zp,	optional = yes;
    EXEHDR:   	load = HEADER, 	type = ro,  optional = yes;
	
	CODE_L: 	load = LO, 	 	type = rw,  optional = yes;
	RODATA_L:	load = LO,		type = ro, 	optional = yes;
	DATA_L:		load = LO,		type = rw, 	optional = yes;
	
    CODE_H:     load = HIGH,   	type = rw;
	CODE_ROM_H:	load = HIGH,	type = ro,  optional = yes;
	CODE_END_H:	load = HIGH,	type = rw,  optional = yes;
    RODATA_H:   load = HIGH,   	type = ro,  optional = yes;
    DATA_H:  	load = HIGH,   	type = rw,  optional = yes;
	
    BSS:     	load = BSS,		type = bss, optional = yes, define = yes;
}
